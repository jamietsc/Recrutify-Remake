@page "/test/{tid:int}"

@using Recrutify.Models
@using Recrutify.DataAccessLayer.Data
@using Recrutify.DataAccessLayer.Repositories
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject BewerberModel bewerberModel
@inject BewerberTestModel bewerberTestModel
@inject IMultipleChoice<MultipleChoiceModel> multipleChoiceService
@inject IBewerber<BewerberModel> bewerberData
@inject NavigationManager navigationManager
@inject HelperModel helperModel
@inject TestModel testModel
@inject IUnternehmen<TestModel> unternehmenService


<PageTitle>Einstellungstest</PageTitle>

<div style="height: calc(100vh - 200px); overflow-y: auto;">
    <h1>Einstellungstest @testModel.Name</h1>

    @if (multipleChoiceQuestions != null && multipleChoiceQuestions.Count() > 0)
    {
        var currentQuestion = multipleChoiceQuestions.ElementAt(helperModel.questionNumber - 1);
        <!-- Hole die aktuelle Frage -->

        <h2>Frage @helperModel.questionNumber: @currentQuestion.Text</h2>

        <div @key="currentQuestion.FID">
            <div class="answer">
                <input class="form-check-input" type="radio" name="radioField_@currentQuestion.FID" id="Answer1_@currentQuestion.FID" value="1" checked="@(currentQuestion.AusgewählteAntwort == 1)" @onchange="() => SetAnswer(currentQuestion, 1)">
                <label class="form-check-label" for="Answer1_@currentQuestion.FID">@currentQuestion.Antwort_1</label>
            </div>
            <div class="answer">
                <input class="form-check-input" type="radio" name="radioField_@currentQuestion.FID" id="Answer2_@currentQuestion.FID" value="2" checked="@(currentQuestion.AusgewählteAntwort == 2)" @onchange="() => SetAnswer(currentQuestion, 2)">
                <label class="form-check-label" for="Answer2_@currentQuestion.FID">@currentQuestion.Antwort_2</label>
            </div>
            <div class="answer">
                <input class="form-check-input" type="radio" name="radioField_@currentQuestion.FID" id="Answer3_@currentQuestion.FID" value="3" checked="@(currentQuestion.AusgewählteAntwort == 3)" @onchange="() => SetAnswer(currentQuestion, 3)">
                <label class="form-check-label" for="Answer3_@currentQuestion.FID">@currentQuestion.Antwort_3</label>
            </div>
            <div class="answer">
                <input class="form-check-input" type="radio" name="radioField_@currentQuestion.FID" id="Answer4_@currentQuestion.FID" value="4" checked="@(currentQuestion.AusgewählteAntwort == 4)" @onchange="() => SetAnswer(currentQuestion, 4)">
                <label class="form-check-label" for="Answer4_@currentQuestion.FID">@currentQuestion.Antwort_4</label>
            </div>
        </div>
    }
    else
    {
        <p>Lade Fragen...</p>
    }

    <dialog id="modal" style="border: 1px solid firebrick; border-radius: 5px;">
        <h2 style="margin: 10px;">Achtung!</h2>
        <p style="margin: 10px;">Sind Sie sicher, dass Sie abgeben wollen? Es sind keine Änderungen mehr möglich.</p>
        <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; align-items: center;">
            <button style="margin: 10px; justify-self: start;" onclick="document.getElementById('modal').close()">Abbrechen</button>
            <div></div>
            <button class="important" style="margin: 10px; justify-self: end;" @onclick="auswerten">Abgeben</button>
        </div>
    </dialog>
</div>

<div class="position-absolute bottom-0" style="display: grid; grid-template-columns: 1fr 2fr 1fr; align-items: center; height: 100px; width: 1280px; background-color: white; border-top: 1px solid lightgrey;">
    <button type="button" disabled="@isPreviousButtonDisabled()" @onclick="previousPage">Zurück</button>
    <div style="display:flex; justify-content: center;">
        @if (verbleibendeZeit.TotalSeconds <= 60)
        {
            <div style="display: flex; justify-content: center; align-items: center; font-size: 24px; background-color: lightcoral; width: 100px; height: 50px; border-radius: 5px;">@zeitAnzeigen</div>
        } else
        {
            <div style="display: flex; justify-content: center; align-items: center; font-size: 24px; background-color: lightgreen; width: 100px; height: 50px; border-radius: 5px;">@zeitAnzeigen</div>
        }
    </div>
    @if (isLastQuestion()) {
        <button type="button" class="important" onclick="document.getElementById('modal').showModal()">Abgeben</button>
    } else
    {
        <button type="button" @onclick="nextPage">Weiter</button>
    }

</div>

<dialog id="modalEndOfTime" style="border: 1px solid firebrick; border-radius: 5px;">
    <h2 style="margin: 10px;">Achtung!</h2>
    <p style="margin: 10px;">Die Zeit ist abgelaufen. Sie müssen nun abgeben.</p>
    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; align-items: center;">
        <div></div>
        <div></div>
        <button class="important" style="margin: 10px; justify-self: end;" @onclick="auswerten">Abgeben</button>
    </div>
</dialog>

@code {
    [Parameter]
    public int tid { get; set; }

    private List<MultipleChoiceModel> multipleChoiceQuestions; // Liste der Fragen
    private int korrekteAntworten = 0;

    private Dictionary<int, int> selectedAnswers = new Dictionary<int, int>();

    private int startMinuten = 2; // Standardwert
    private TimeSpan verbleibendeZeit;
    private string zeitAnzeigen = "00:00";
    private System.Timers.Timer timer;
    private bool timerEnded = false;

    protected override async Task OnInitializedAsync()
    {
        multipleChoiceQuestions = (await multipleChoiceService.GetMultipleChoice(tid)).ToList();
        helperModel.questionNumber = 1; // Erste Frage starten
        startMinuten = testModel.Dauer; //*****************************************************************************************Hier auskommentieren, wenn Timer-Ende zeigen******************************************
        StartTimer();
    }

    private void SetAnswer(MultipleChoiceModel multipleChoiceModel, int selectedAnswer)
    {
        multipleChoiceModel.AusgewählteAntwort = selectedAnswer;
        StateHasChanged();
    }

    private bool isPreviousButtonDisabled()
    {
        return helperModel.questionNumber == 1;
    }

    private bool isLastQuestion()
    {
        return helperModel.questionNumber == multipleChoiceQuestions.Count;
    }

    private void previousPage()
    {
        if (helperModel.questionNumber > 1)
        {
            helperModel.questionNumber--;
            StateHasChanged();
        }
    }

    private void nextPage()
    {
        if (helperModel.questionNumber < multipleChoiceQuestions.Count)
        {
            helperModel.questionNumber++;
            StateHasChanged();
        }
    }


    private async void auswerten() //Funktion welche am Ende im Button benutzt werden soll, dient zum speichern der Punkte in die DB
    {
        foreach(var question in multipleChoiceQuestions)
        {
            if ((question.AusgewählteAntwort == 1 && question.Richtig_1) ||
                (question.AusgewählteAntwort == 2 && question.Richtig_2) ||
                (question.AusgewählteAntwort == 3 && question.Richtig_3) ||
                (question.AusgewählteAntwort == 4 && question.Richtig_4))
            {
                korrekteAntworten++;
            }


        }
        bewerberModel.Ergebnis = korrekteAntworten;
        await bewerberData.InsertPunktzahl(bewerberModel);
        Console.WriteLine(korrekteAntworten);
        navigationManager.NavigateTo("/end");
    }

    private void StartTimer()
    {
        // Setze die verbleibende Zeit auf die gewünschte Startzeit
        verbleibendeZeit = TimeSpan.FromMinutes(startMinuten);
        UpdateAnzeige(); // Initiale Anzeige aktualisieren

        // Initialisiere den Timer für sekündliche Updates
        timer = new System.Timers.Timer(1000); // 1000ms = 1 Sekunde
        timer.Elapsed += OnTimerElapsed;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private void OnTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        // Reduziere die verbleibende Zeit um eine Sekunde
        verbleibendeZeit = verbleibendeZeit.Subtract(TimeSpan.FromSeconds(1));

        if (verbleibendeZeit.TotalSeconds <= 0)
        {
            // Countdown ist abgelaufen, Timer stoppen
            timer.Stop();
            verbleibendeZeit = TimeSpan.Zero;
            OpenModal();
        }

        // Aktualisiere die Anzeige im UI
        InvokeAsync(UpdateAnzeige);
    }

    private void UpdateAnzeige()
    {
        // Formatierte Zeit anzeigen: Minuten:Sekunden
        zeitAnzeigen = verbleibendeZeit.ToString(@"mm\:ss");
        StateHasChanged();
    }

    public void Dispose()
    {
        // Ressourcen aufräumen, wenn die Komponente entfernt wird
        timer?.Dispose();
    }

    private async void OpenModal()
    {
        await JSRuntime.InvokeVoidAsync("OpenModal"); // JavaScript-Funktion aufrufen
    }
}