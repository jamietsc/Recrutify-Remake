@page "/test/{tid:int}"
@using Recrutify.Models
@using Recrutify.DataAccessLayer.Data
@using Recrutify.DataAccessLayer.Repositories
@inject BewerberModel bewerberModel
@inject BewerberTestModel bewerberTestModel
@inject IMultipleChoice<MultipleChoiceModel> multipleChoiceService
@inject IBewerber<BewerberModel> bewerberData
@inject NavigationManager navigationManager
@inject HelperModel helperModel
@inject TestModel testModel



<PageTitle>Einstellungstest</PageTitle>

<div style="height: calc(100vh - 200px); overflow-y: auto;">
    <h1>Einstellungstest @testModel.Name</h1>

    @if (multipleChoiceQuestions != null && multipleChoiceQuestions.Count() > 0)
    {
        var currentQuestion = multipleChoiceQuestions.ElementAt(helperModel.questionNumber - 1);
        <!-- Hole die aktuelle Frage -->

        <h2>Frage @helperModel.questionNumber: @currentQuestion.Text</h2>

        <div @key="currentQuestion.FID">
            <div class="answer">
                <input class="form-check-input" type="radio" name="radioField_@currentQuestion.FID" id="Answer1_@currentQuestion.FID" value="1" checked="@(currentQuestion.AusgewählteAntwort == 1)" @onchange="() => SetAnswer(currentQuestion, 1)">
                <label class="form-check-label" for="Answer1_@currentQuestion.FID">@currentQuestion.Antwort_1</label>
            </div>
            <div class="answer">
                <input class="form-check-input" type="radio" name="radioField_@currentQuestion.FID" id="Answer2_@currentQuestion.FID" value="2" checked="@(currentQuestion.AusgewählteAntwort == 2)" @onchange="() => SetAnswer(currentQuestion, 2)">
                <label class="form-check-label" for="Answer2_@currentQuestion.FID">@currentQuestion.Antwort_2</label>
            </div>
            <div class="answer">
                <input class="form-check-input" type="radio" name="radioField_@currentQuestion.FID" id="Answer3_@currentQuestion.FID" value="3" checked="@(currentQuestion.AusgewählteAntwort == 3)" @onchange="() => SetAnswer(currentQuestion, 3)">
                <label class="form-check-label" for="Answer3_@currentQuestion.FID">@currentQuestion.Antwort_3</label>
            </div>
            <div class="answer">
                <input class="form-check-input" type="radio" name="radioField_@currentQuestion.FID" id="Answer4_@currentQuestion.FID" value="4" checked="@(currentQuestion.AusgewählteAntwort == 4)" @onchange="() => SetAnswer(currentQuestion, 4)">
                <label class="form-check-label" for="Answer4_@currentQuestion.FID">@currentQuestion.Antwort_4</label>
            </div>
        </div>
    }
    else
    {
        <p>Lade Fragen...</p>
    }

    <dialog id="modal" style="border: 1px solid firebrick; border-radius: 5px;">
        <h2 style="margin: 10px;">Achtung!</h2>
        <p style="margin: 10px;">Sind Sie sicher, dass Sie abgeben wollen? Es sind keine Änderungen mehr möglich.</p>
        <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; align-items: center;">
            <button style="margin: 10px; justify-self: start;" onclick="document.getElementById('modal').close()">Abbrechen</button>
            <div></div>
            <button class="important" style="margin: 10px; justify-self: end;" @onclick="auswerten">Abgeben</button>
        </div>
    </dialog>
</div>

<div class="position-absolute bottom-0" style="display: grid; grid-template-columns: 1fr 2fr 1fr; align-items: center; height: 100px; width: 1280px; background-color: white; border-top: 1px solid lightgrey;">
    <button type="button" disabled="@isPreviousButtonDisabled()" @onclick="previousPage">Zurück</button>
    <div>Hier könnte Ihre Werbung stehen.</div>
    @if (isLastQuestion()) {
        <button type="button" class="important" onclick="document.getElementById('modal').showModal()">Abgeben</button>
    } else
    {
        <button type="button" @onclick="nextPage">Weiter</button>
    }

</div>

@code {
    [Parameter]
    public int tid { get; set; }

    private List<MultipleChoiceModel> multipleChoiceQuestions; // Liste der Fragen
    private int korrekteAntworten = 0;

    private Dictionary<int, int> selectedAnswers = new Dictionary<int, int>();

    protected override async Task OnInitializedAsync()
    {
        multipleChoiceQuestions = (await multipleChoiceService.GetMultipleChoice(tid)).ToList();
        helperModel.questionNumber = 1; // Erste Frage starten
    }

    private void SetAnswer(MultipleChoiceModel multipleChoiceModel, int selectedAnswer)
    {
        multipleChoiceModel.AusgewählteAntwort = selectedAnswer;
        StateHasChanged();
    }

    private bool isPreviousButtonDisabled()
    {
        return helperModel.questionNumber == 1;
    }

    private bool isLastQuestion()
    {
        return helperModel.questionNumber == multipleChoiceQuestions.Count;
    }

    private void previousPage()
    {
        if (helperModel.questionNumber > 1)
        {
            helperModel.questionNumber--;
            StateHasChanged();
        }
    }

    private void nextPage()
    {
        if (helperModel.questionNumber < multipleChoiceQuestions.Count)
        {
            helperModel.questionNumber++;
        }
    }

    private async void auswerten() //Funktion welche am Ende im Button benutzt werden soll, dient zum speichern der Punkte in die DB
    {
        foreach(var question in multipleChoiceQuestions)
        {
            if ((question.AusgewählteAntwort == 1 && question.Richtig_1) ||
                (question.AusgewählteAntwort == 2 && question.Richtig_2) ||
                (question.AusgewählteAntwort == 3 && question.Richtig_3) ||
                (question.AusgewählteAntwort == 4 && question.Richtig_4))
            {
                korrekteAntworten++;
            }

            await bewerberData.InsertPunktzahl(bewerberModel);

            StateHasChanged();
        }
    }


    private async void auswerten() //Funktion welche am Ende im Button benutzt werden soll, dient zum speichern der Punkte in die DB
    {
        foreach(var question in multipleChoiceQuestions)
        {
            if ((question.AusgewählteAntwort == 1 && question.Richtig_1) ||
                (question.AusgewählteAntwort == 2 && question.Richtig_2) ||
                (question.AusgewählteAntwort == 3 && question.Richtig_3) ||
                (question.AusgewählteAntwort == 4 && question.Richtig_4))
            {
                korrekteAntworten++;
            }

            await bewerberData.InsertPunktzahl(bewerberModel);
        }

        Console.WriteLine(korrekteAntworten);
        navigationManager.NavigateTo("/end");
    }
}