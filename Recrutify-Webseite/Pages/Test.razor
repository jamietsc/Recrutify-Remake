@page "/test/{tid:int}"

@using Recrutify.Models
@using Recrutify.DataAccessLayer.Data
@using Recrutify.DataAccessLayer.Repositories
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject BewerberModel bewerberModel
@inject BewerberTestModel bewerberTestModel
@inject IBewerber<BewerberModel> bewerberData
@inject NavigationManager navigationManager
@inject HelperModel helperModel
@inject TestModel testModel
@inject IUnternehmen<TestModel> unternehmenService
@inject IQuestionType<QuestionTypeModel> questionTypeService
@inject ISingleChoice<SingleChoiceModel> singleChoiceService
@inject IMultipleChoice<MultipleChoiceModel> multipleChoiceService
@inject IFreeText<FreeTextModel> freeTextService
@inject ITrueFalse<TrueFalseModel> trueFalseService

<PageTitle>Einstellungstest</PageTitle>

<!-- Container für anzuzeigende Fragen -->
<div style="height: calc(100vh - 200px); overflow-y: auto;">
    <h1>Einstellungstest @testModel.Name</h1>
    @switch (currentQuestionType)
    {
        case 0:
            <Recrutify.Pages.QuestionTypes.SingleChoice currentQuestion="currentSingleChoiceQuestion"/>
            break;

        case 1:
            <Recrutify.Pages.QuestionTypes.MultipleChoice currentQuestion="currentMultipleChoiceQuestion"/>
            break;

        case 2:
            <Recrutify.Pages.QuestionTypes.FreeText currentQuestion="currentFreeTextQuestion"/>
            break;

        case 3:
            <Recrutify.Pages.QuestionTypes.TrueFalse currentQuestion="currentTrueFalseQuestion"/>
            break;

        case 999: //Tritt auf, wenn loadCurrentQuestionType() den Fragentyp nicht ermitteln konnte
            <p>Beim Laden der Frage ist ein Fehler aufgetreten. Bitte klicken Sie auf Weiter.</p>
            break;

        default: //Tritt auf, wenn ein Fragentyp übergeben wurde, der nicht implementiert ist
            <p>Beim Laden der Frage ist ein Fehler aufgetreten. Bitte klicken Sie auf Weiter.</p>
            break;
    }
</div>

<!-- Container für untere Navigationsleiste -->
<div class="position-absolute bottom-0" style="display: grid; grid-template-columns: 1fr 2fr 1fr; align-items: center; height: 100px; width: 1280px; background-color: white; border-top: 1px solid lightgrey;">
    <button type="button" disabled="@isPreviousButtonDisabled()" @onclick="previousPage">Zurück</button>
    <div style="display:flex; justify-content: center;">
        @if (helperModel.useTimer == true)
        {
            @if (verbleibendeZeit.TotalSeconds <= 60)
            {
                <div style="display: flex; justify-content: center; align-items: center; font-size: 24px; background-color: lightcoral; width: 120px; height: 50px; border-radius: 5px;">@zeitAnzeigen</div>
            }
            else
            {
                <div style="display: flex; justify-content: center; align-items: center; font-size: 24px; background-color: lightgreen; width: 120px; height: 50px; border-radius: 5px;">@zeitAnzeigen</div>
            }
        }
    </div>
    @if (isLastQuestion())
    {
        <button type="button" class="important" onclick="document.getElementById('modal').showModal()">Abgeben</button>
    }
    else
    {
        <button type="button" @onclick="nextPage">Weiter</button>
    }
</div>

<!-- Container für Abgabe-Fenster -->
<dialog id="modal" style="border: 1px solid firebrick; border-radius: 5px;">
    <h2 style="margin: 10px;">Achtung!</h2>
    <p style="margin: 10px;">Sind Sie sicher, dass Sie abgeben wollen? Es sind keine Änderungen mehr möglich.</p>
    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; align-items: center;">
        <button style="margin: 10px; justify-self: start;" onclick="document.getElementById('modal').close()">Abbrechen</button>
        <div></div>
        <button class="important" style="margin: 10px; justify-self: end;" @onclick="auswerten">Abgeben</button>
    </div>
</dialog>

<!-- Container für Abgabe-Fenster nach Ablauf des Timers -->
<dialog id="modalEndOfTime" style="border: 1px solid firebrick; border-radius: 5px;">
    <h2 style="margin: 10px;">Achtung!</h2>
    <p style="margin: 10px;">Die Zeit ist abgelaufen. Sie müssen nun abgeben.</p>
    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; align-items: center;">
        <div></div>
        <div></div>
        <button class="important" style="margin: 10px; justify-self: end;" @onclick="auswerten">Abgeben</button>
    </div>
</dialog>

@code {
    [Parameter]
    public int tid { get; set; }

    //Variablen für Unterscheidung der Fragentypen und Darstellung der aktuellen Frage
    public List<QuestionTypeModel> questionTypes = new List<QuestionTypeModel>();           //in dieser Liste alle Fragen in Form von FID und Fragentyp gespeichert
    public int currentFID = 1;
    public int currentQuestionType = 0;
    public QuestionTypeModel currentQuestion;

    //Variablen für Single-Choice-Fragen
    public List<SingleChoiceModel> singleChoiceQuestions = new List<SingleChoiceModel>();   //in dieser Liste alle Single-Choice-Fragen vollständig gespeichert
    public SingleChoiceModel currentSingleChoiceQuestion;                                   //aktuelle Single-Choice-Frage

    //Variablen für Multiple-Choice-Fragen
    public List<MultipleChoiceModel> multipleChoiceQuestions = new List<MultipleChoiceModel>();
    public MultipleChoiceModel currentMultipleChoiceQuestion;

    //Variablen für Freitext-Fragen
    public List<FreeTextModel> freeTextQuestions = new List<FreeTextModel>();
    public FreeTextModel currentFreeTextQuestion;

    //Variablen für Ja-Nein-Fragen
    public List<TrueFalseModel> trueFalseQuestions = new List<TrueFalseModel>();
    public TrueFalseModel currentTrueFalseQuestion;

    //Variablen für Auswertung
    private int korrekteAntworten = 0;

    //Variablen für Timer
    private int startMinuten = 60; // Standardwert
    private TimeSpan verbleibendeZeit;
    private string zeitAnzeigen = "00:00";
    private System.Timers.Timer timer;
    private bool timerEnded = false;

    //Initialisierung der Test-Seite
    protected override async Task OnInitializedAsync()
    {
        //Lädt alle FIDs mit zugehörigen Fragentypen in eine Liste
        questionTypes = (await questionTypeService.GetQuestionTypes(tid)).ToList();

        //Lädt erste FID des aktuellen Tests
        helperModel.firstFID = questionTypes[0].FID;
        helperModel.currentFID = helperModel.firstFID;

        //Lädt alle Fragen in separate Listen abhängig vom Fragentyp
        foreach (var questionType in questionTypes)
        {
            if (questionType != null && questionType.Fragentyp == 0) {
                var singleChoiceQuestion = await singleChoiceService.GetSingleChoiceQuestion(tid, questionType.FID);
                singleChoiceQuestions.Add(singleChoiceQuestion);
            }

            if (questionType != null & questionType.Fragentyp == 1)
            {
                var multipleChoiceQuestion = await multipleChoiceService.GetMultipleChoiceQuestion(tid, questionType.FID);
                multipleChoiceQuestions.Add(multipleChoiceQuestion); 
            }

            if (questionType != null & questionType.Fragentyp == 2)
            {
                var freeTextQuestion = await freeTextService.GetFreeTextQuestion(tid, questionType.FID);
                freeTextQuestions.Add(freeTextQuestion);
            }

            if (questionType != null & questionType.Fragentyp == 3)
            {
                var trueFalseQuestion = await trueFalseService.GetTrueFalseQuestion(tid, questionType.FID);
                trueFalseQuestions.Add(trueFalseQuestion);
            }
        }

        //Ermittelt, ob es ein Zeitlimit gibt und Timer dementsprechend genutzt werden soll
        if (testModel.Dauer == 0)
        {
            helperModel.useTimer = false;
        } else
        {
            helperModel.useTimer = true;
        }

        //Startet Timer, falls genutzt
        if (helperModel.useTimer == true)
        {
            startMinuten = testModel.Dauer;
            StartTimer();
        }

        // Erste Frage starten
        currentQuestionType = loadCurrentQuestionType(helperModel.firstFID);
        loadCurrentQuestion(helperModel.firstFID, currentQuestionType);
    }

    //Lädt Fragentyp der aktuellen Frage
    private int loadCurrentQuestionType(int FID)
    {
        currentQuestion = questionTypes.FirstOrDefault(q => q.FID == FID);
        if (currentQuestion != null)
        {
            return currentQuestion.Fragentyp;
        } else
        {
            return 999;
        }
    }

    //Setzt aktuelle Frage in bestimmte Variable abhängig vom Fragentyp
    private void loadCurrentQuestion(int FID, int questionType)
    {
        switch(questionType)
        {
            case 0:
                currentSingleChoiceQuestion = singleChoiceQuestions.FirstOrDefault(q => q.FID == FID);
                break;

            case 1:
                currentMultipleChoiceQuestion = multipleChoiceQuestions.FirstOrDefault(q => q.FID == FID);
                break;

            case 2:
                currentFreeTextQuestion = freeTextQuestions.FirstOrDefault(q => q.FID == FID);
                helperModel.currentFreeTextAnswer = freeTextQuestions.FindIndex(q => q.FID == FID) + 1;
                break;

            case 3:
                currentTrueFalseQuestion = trueFalseQuestions.FirstOrDefault(q => q.FID == FID);
                break;

            case 999:
                break;
        }
    }

    //Wertet die gesetzten Antworten nach Abgabe aus
    private async void auswerten()
    {
        //Vergleicht gesetzte Antworten der Single-Choice-Fragen mit richtigen Antworten aus DB und zählt korrekte Antworten entsprechend hoch
        foreach (var singleChoiceQuestion in singleChoiceQuestions)
        {
            if ((singleChoiceQuestion.Gewaehlte_Antwort == 1 && singleChoiceQuestion.Richtig_1) ||
                (singleChoiceQuestion.Gewaehlte_Antwort == 2 && singleChoiceQuestion.Richtig_2) ||
                (singleChoiceQuestion.Gewaehlte_Antwort == 3 && singleChoiceQuestion.Richtig_3) ||
                (singleChoiceQuestion.Gewaehlte_Antwort == 4 && singleChoiceQuestion.Richtig_4))
            {
                korrekteAntworten++;
            }
        }

        //Vergleicht gesetzte Antworten der Multiple-Choice-Fragen mit richtigen Antworten aus DB und zählt korrekte entsprechend Antworten hoch
        foreach (var multipleChoiceQuestion in multipleChoiceQuestions)
        {
            if ((multipleChoiceQuestion.Gewaehlte_Antwort_1 == multipleChoiceQuestion.Richtig_1) && 
                (multipleChoiceQuestion.Gewaehlte_Antwort_2 == multipleChoiceQuestion.Richtig_2) &&
                (multipleChoiceQuestion.Gewaehlte_Antwort_3 == multipleChoiceQuestion.Richtig_3) &&
                (multipleChoiceQuestion.Gewaehlte_Antwort_4 == multipleChoiceQuestion.Richtig_4))
            {
                korrekteAntworten++;
            }
        }

        //Speichert Freitext-Antworten in DB ab
        helperModel.currentFreeTextAnswer = 1;
        foreach (var freeTextQuestion in freeTextQuestions)
        {
            await freeTextService.InsertFreeTextAnswer(freeTextQuestion, bewerberModel.BID, helperModel.currentFreeTextAnswer);
            if (helperModel.currentFreeTextAnswer < 3)
            {
                helperModel.currentFreeTextAnswer++;
            }
        }

        //Vergleicht gesetzte Antworten der Ja-Nein-Fragen mit richtigen Antworten aus DB und zählt korrekte Antworten hoch
        foreach (var trueFalseQuestion in trueFalseQuestions)
        {
            if (trueFalseQuestion.Gewaehlte_Antwort == Convert.ToInt32(trueFalseQuestion.Antwort_JaNein))
            {
                korrekteAntworten++;
            }
        }

        //Stoppt Timer, sobald abgegeben
        if (timer != null)
        {
            timer.Stop();
        }

        bewerberModel.Ergebnis = korrekteAntworten;
        await bewerberData.InsertPunktzahl(bewerberModel);
        Console.WriteLine(korrekteAntworten);
        navigationManager.NavigateTo("/end");
    }

    //Prüft, ob aktuelle FID gleich der ersten FID ist
    private bool isPreviousButtonDisabled()
    {
        return helperModel.currentFID == helperModel.firstFID;
    }

    //Prüft, ob aktuelle FID gleich der letzten FID ist
    private bool isLastQuestion()
    {
        return helperModel.currentFID == questionTypes.Count + helperModel.firstFID - 1; //damit Differenz zwischen Wert der ersten FID und Wert 1 ausgeglichen und somit oberste Grenze entsprechend gesetzt
    }

    //navigiert zu vorheriger Seite
    private void previousPage()
    {
        if (helperModel.currentFID > helperModel.firstFID)
        {
            helperModel.currentFID--;
            currentQuestionType = loadCurrentQuestionType(helperModel.currentFID);
            loadCurrentQuestion(helperModel.currentFID, currentQuestionType);
            StateHasChanged();
        }
    }

    //navigiert zu nächster Seite
    private void nextPage()
    {
        if (isLastQuestion() == false)
        {
            helperModel.currentFID++;
            currentQuestionType = loadCurrentQuestionType(helperModel.currentFID);
            loadCurrentQuestion(helperModel.currentFID, currentQuestionType);
            //Console.WriteLine(helperModel.currentFreeTextAnswer);
            StateHasChanged();
        }
    }

    //Startet Timer
    private void StartTimer()
    {
        //Setzt die verbleibende Zeit auf die gewünschte Startzeit
        verbleibendeZeit = TimeSpan.FromMinutes(startMinuten);
        UpdateAnzeige(); //Initiale Anzeige aktualisieren

        //Initialisiert den Timer für sekündliche Updates
        timer = new System.Timers.Timer(1000); //1000ms = 1 Sekunde
        timer.Elapsed += OnTimerElapsed;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    //wird jede Sekunde durch den Timer getriggert
    private void OnTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        //Reduziert die verbleibende Zeit um eine Sekunde
        verbleibendeZeit = verbleibendeZeit.Subtract(TimeSpan.FromSeconds(1));

        if (verbleibendeZeit.TotalSeconds <= 0)
        {
            //Countdown ist abgelaufen, Timer stoppen
            timer.Stop();
            verbleibendeZeit = TimeSpan.Zero;
            InvokeAsync(OpenEndOfTimeModal);
        }

        //Aktualisiert die Anzeige im UI
        InvokeAsync(UpdateAnzeige);
    }

    //aktualisiert die Timer-Anzeige und unterscheidet, falls Zeit unter 60 Minuten ist
    private void UpdateAnzeige()
    {
        if (verbleibendeZeit.TotalMinutes < 60)
        {
            zeitAnzeigen = $"{verbleibendeZeit.Minutes:D2}:{verbleibendeZeit.Seconds:D2}";
        } else
        {
            zeitAnzeigen = $"{(int)verbleibendeZeit.TotalHours:D2}:{verbleibendeZeit.Minutes:D2}:{verbleibendeZeit.Seconds:D2}";
        }
        StateHasChanged();
    }

    //Ressourcen aufgeräumt, wenn Timer beendet wird
    public void Dispose()
    {
        timer?.Dispose();
    }

    //ruft Abgabe-Fenster nach Ablauf des Timers auf
    private async void OpenEndOfTimeModal()
    {
        await JSRuntime.InvokeVoidAsync("OpenEndOfTimeModal"); // JavaScript-Funktion aufrufen
    }
}